from aiogram import Bot, Router, F
from aiogram.types import InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.models import PostRequest, PostPublication
from src.misc.callback_factories import PostRequestValidationCallback
from config import PUBLICATION_CHANNEL_ID, APPROVING_CHANNEL_ID
from src.misc.enums import UsageStatus


def get_approve_or_deny_post(post: PostRequest) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ', callback_data=PostRequestValidationCallback(confirm='True', request_id=post.number))
    builder.button(text='‚ùå', callback_data=PostRequestValidationCallback(confirm='False', request_id=post.number))
    return builder.as_markup()


async def get_post_text(bot: Bot, post: PostRequest) -> str:
    cost_text = '#–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è' if not post.cost else post.cost

    contacts_text = f'<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {post.phone_number}'
    contacts_text += f' \n<b>–ü–æ—á—Ç–∞:</b> {post.email}' if post.email else ''
    if not (await bot.get_chat(chat_id=post.user.telegram_id)).has_private_forwards:
        contacts_text += f' \n<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> <a href="tg://user?id={post.user.telegram_id}">{post.user.name}</a>'

    usage_status = '–ù–æ–≤—ã–π_–ø–æ–¥–¥–æ–Ω' if post.usage_status == UsageStatus.NEW else '–ë–£_–ø–æ–¥–¥–æ–Ω'

    return (
        f"<b>–°–¥–µ–ª–∫–∞:</b> #{post.deal_type} \n"
        f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> #{usage_status} \n"
        f"<b>–†–∞–∑–º–µ—Ä:</b> #{post.size} \n"
        f"<b>–°–æ—Ä—Ç:</b> #{post.sort} \n"
        f"<b>–¶–µ–Ω–∞:</b> {cost_text} \n"
        f"<b>–£—Å–ª–æ–≤–∏–µ –æ–ø–ª–∞—Ç—ã:</b> {post.payment_terms} \n"
        f"<b>–£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {post.delivery_option} \n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {post.address} \n"
        f"{contacts_text}"
    )


async def send_post_to_admins_approving(bot: Bot, post: PostRequest):
    text = await get_post_text(bot=bot, post=post)
    markup = get_approve_or_deny_post(post=post)

    await bot.send_message(chat_id=APPROVING_CHANNEL_ID, text=text, reply_markup=markup)


async def handle_deny_request(callback: CallbackQuery):
    await callback.message.edit_text(text=f"{callback.message.html_text} \n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")


async def handle_confirm_request(callback: CallbackQuery, callback_data: PostRequestValidationCallback):
    await callback.message.edit_text(text=f"{callback.message.html_text} \n\n‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")

    post = PostRequest.get(number=callback_data.request_id)
    publication, is_created = PostPublication.get_or_create(post=post)
    if not is_created:
        return

    post_text = await get_post_text(bot=callback.bot, post=post)
    channel_url = 'https://t.me/palletprice'
    footer_text = (
        '<b>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ:</b> \n\n'
        '- —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏ \n'
        '- —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ \n'
        '- –¢–£ —Ç–æ–≤–∞—Ä–∞ \n\n'
        f'<a href="{channel_url}"><b>PalletPrice | –ë–∏—Ä–∂–∞ –ø–∞–ª–ª–µ—Ç</b></a> üëà'
    )
    text = f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ{publication.number}</b> \n\n{post_text} \n\n{footer_text}"

    await callback.bot.send_message(chat_id=PUBLICATION_CHANNEL_ID, text=text)


def handle_requests_confirmation_handlers(router: Router):
    router.callback_query.register(handle_confirm_request, PostRequestValidationCallback.filter(F.confirm == 'True'))
    router.callback_query.register(handle_deny_request, PostRequestValidationCallback.filter(F.confirm == 'False'))
